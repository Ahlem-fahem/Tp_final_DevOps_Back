# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.4

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/Tp_final_DevOps_Back/autoapp.py

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/prod.txt" }}
            - v3-dependencies-
            # fallback to using the latest cache if no exact match is found

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
          environment:
            CONDUIT_SECRET: 'something-really-secret'
            FLASK_APP: C:/Users/pc/PycharmProjects/Tp_final_DevOps_Back/autoapp.py
            FLASK_DEBUG: 1

      - save_cache:
          paths:
            - venv
          key: v3-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/prod.txt" }}



  test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.4
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: User
          POSTGRES_PASSOWRD: passwrd
          POSTGRES_DB: User

    working_directory: ~/Tp_final_DevOps_Back/autoapp.py

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/prod.txt" }}
            - v3-dependencies-
            # fallback to using the latest cache if no exact match is found
    
      - run:
          name: bd upgrade 
          command: |
            . venv/bin/activate
            sleep 1
            flask db upgrade
          environment:
            CONDUIT_SECRET: 'something-really-secret'
            FLASK_APP: C:/Users/pc/PycharmProjects/Tp_final_DevOps_Back/autoapp.py
            DATABASE_URL: postgresql://User:passwrd@localhost:5432/User
            FLASK_DEBUG: 1
            POSTGRES_USER: postgres
            POSTGRES_DB: db_test
            POSTGRES_PASSWORD: passwrd
            POSTGRES_PORT: 5432


      

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            flask db migrate
            flask test
          environment:
            CONDUIT_SECRET: 'something-really-secret'
            FLASK_APP: C:/Users/pc/PycharmProjects/Tp_final_DevOps_Back/autoapp.py
            DATABASE_URL: postgresql://User:passwrd@localhost:5432/User
            FLASK_DEBUG: 1
            POSTGRES_USER: postgres
            POSTGRES_DB: db_test
            POSTGRES_PASSWORD: passwrd
            POSTGRES_PORT: 5432

      - save_cache:
          paths:
            - venv
          key: v3-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/prod.txt" }}

  back-deploy-heroku:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      
      - run:
          name: Heroku Deploy
          command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git main
  docker-build-and-push:
    working_directory: /dockerapp
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build app  for docker
          command: |
            docker build --cache-from=app -t app .
      - deploy:
          name: we publish the app on my docker hub
          environment:
            CIRCLE_BUILD_NUM: 1
          command: |
            docker login -e $DOCKER_HUB_EMAIL -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
            docker tag app $DOCKER_HUB_USER_ID/backend_final:$CIRCLE_BUILD_NUM
            docker tag app $DOCKER_HUB_USER_ID/backend_final:latest
            docker push $DOCKER_HUB_USER_ID/backend_final:$CIRCLE_BUILD_NUM
            docker push $DOCKER_HUB_USER_ID/backend_final:latest
workflows:
  version: 2
  build-back-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - back-deploy-heroku:
          requires:
            - build
      - docker-build-and-push:
          requires:
            - back-deploy-heroku